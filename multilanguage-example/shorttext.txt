CSC 440Design and Analysis of Algorithms Tues & Thurs 11:00-12:15, Gilbreth 118Prof. Noah M. Danielsndaniels@cs.uri.edu www.cs.uri.edu/n ̃daniels/ Tyler 128Office Hours: TBD(401) 874-4391TA: Gabriel De Pacegdepace@my.uri.edu Tyler TBDOffice Hours: TBDChanges to course policies or schedule may occur in response to unforeseen circumstances. I will notify the class of any changes immediately.Course Description: Algorithm design and analysis, advanced data structures, computational complexity. Sorting, searching including hashing and balanced trees, string pattern matching, poly- nomial and matrix calculations, graph and network algorithms, NP-completeness and intractability. Algorithmic techniques including dynamic programming, divide and conquer, and greedy algo- rithms.Prerequisite(s): CSC 340.Text: Algorithm DesignAuthors: Kleinberg & Tardos; ISBN-13: 978-0133072525Course Objectives:At the completion of this course, students will be able to:1. Choose appropriate algorithms to solve common problems2. Design new algorithms to solve new problems3. Determine the theoretical efficiency of those algorithms4. Implement those algorithms in the programming language of their choice 5. Benchmark and present the actual efficiency of those algorithms1
Grade Distribution:Class Participation 10% Office Hour Attendance 5% Assignment 0 (Introduction) 5%Projects80%Letter Grade Distribution:>= 93.00 90.00 - 92.99 87.00 - 89.99 83.00 - 86.99Course Policies:• Attendance– You are expected to attend class. I do not take attendance per se, but in-class exerciseswill not be announced ahead of time.• Grades– Grades in the C range represent performance that meets expectations; Grades in the B range represent performance that is substantially better than the expectations; Grades in the A range represent work that is excellent.– Grades will be maintained in Sakai. Students are responsible for tracking their progress by referring to the online gradebook.– Class participation is very specific: there will be frequent in-class exercises, done in groups of 4-5 students. Participation in these exercises is expected. If you participate in at least 75% of these exercises, you will receive 100% of the Class Participation grade. Otherwise you will receive zero for Class Participation.– Office Hour Attendance is also very specific: Every student is expected to come to Prof. Daniels’ office hours at least once during the first half of the semester (specifically, by October 31st). You may attend in a small group with one or two other students if you wish. Of course, you should come to office hours more frequently if you need help, have concerns, or merely wish to chat.• Assignments– Programming assignments will be done in pairs.– Written assignments (e.g. proofs and problem sets) must be done individually.– If you are ever unclear about whether an assignment should be done by yourself or with a partner, please ask!– All assignments will be submitted and graded through Gradescope. More information on Gradescope will be included with Assignment 0.• Exams– There are none.  A 80.00 - 82.99 B-A- 77.00 - 79.99 C+   63.00 - 66.99 D   B+ 73.00 - 76.99 C B 70.00 - 72.99 C-67.00 - 69.99 D+ 60.00 - 62.99 D-<= 59.99 F  2
Students with DisabilitiesAny student with a documented disability is welcome to contact me as early in the semester as possible so that we may arrange reasonable accommodations. As part of this process, please be in touch with Disability Services for Students Office at 302 Memorial Union, Phone 401-874-2098.Academic Honesty Policy:All submitted work must be your own. If you consult other sources (class readings, articles or books from the library, articles available through internet databases, or websites) these MUST be properly documented, or you will be charged with plagiarism and will receive an F for the paper. In some cases, this may result in a failure of the course as well. In addition, the charge of academic dishonesty will go on your record in the Office of Student Life. If you have any doubt about what constitutes plagiarism, visit the following websites: the URI Student Handbook, and Sections 8.27.10 8.27.21 of the University Manual (web.uri.edu/manual/).Programming assignments will be done in pairs. For the purposes of pair programming assign- ments, “your own” means that the work is the product of you and your partner, together.AttendanceStudents are expected to attend class and classroom activities. Occasionally, students may miss class activities due to illness, severe weather, or sanctioned University events. If ill, students should not attend class and should seek medical attention especially if they have a communicable disease such as influenza (flu). Students should not attend class when the University announces classes are cancelled due to severe weather. Also, it is the policy of the University of Rhode Island to accord students, on an individual basis, the opportunity to observe their traditional religious holidays. Students desiring to observe a holiday of special importance must inform each instructor and discuss options for missed classes or examinations. See Sections 8.51.11 8.51.14 of the University Manual for policy regarding make-up of missed class or examinations.I do not specifically take attendance. However, 10% of your grade is determined by class par- ticipation, which includes participating in group exercises. If you do not participate in at least 75% of group exercises, you will receive a zero for class participation.Pair Programming:Professional engineering and computer science are collaborative endeavors. And yet, while you are a student, you earn an individual grade. To balance these competing concerns, we support• Wide but shallow collaboration when discussing ideas and problems• Deep but narrow collaboration when creating and debugging computer programsWide but shallow collaboration means that while you are striving to understand a problem and discover possible paths to its solution, you are encouraged to discuss the problem and your ideas with friends and colleagues—you will do much better in the course, and at URI, if you find people with whom you regularly discuss problems. When the time comes to write code, however, group discussions are no longer appropriate.Deep but narrow collaboration means pair programming. In pair programming, you work with a partner under the following constraints:• When work is being done on the program, both partners are present at the computer. One partner holds the keyboard; the other watches the screen. Both partners talk, and the keyboard should change hands occasionally.• You submit a single program (or design) under both your names. That work gets one grade, which you both receive.3
The following policies are essential:• Every source of assistance must be acknowledge in writing. This rule applies to discussions with classmates or course staff as well as assistance you might find in the library or on the web. There is never a penalty for seeking help with a problem, but help must be acknowledged.• If circumstances, such as scheduling difficulties, make it impossible for you to work as part of a pair, you may ask the course staff for permission to divide an assignment into parts and to do some parts as a member of a pair and other parts as an individual. Such parts must appear in different files, and each file must be clearly identified as the work of an individual or the work of a pair. Work done jointly by the pair should be submitted by both members of the pair. Files containing joint work must be identical. If you as an individual modify a file containing joint work, and you submit the modified file, that act will be considered a violation of academic integrity.• It is never acceptable to divide an assignment into parts and have some parts done by one partner and other parts done by the other. Submitting work done by someone else as your own will be considered an egregious violation of academic integrity. Submitting individual work as the product of pair programming is also a violation of academic integrity.• If your partner disappears in mid-project, the correct procedure is submit the work done in partnership at that point, even if it is incomplete or broken. You may then follow up with an additional submission of whatever you complete on your own.• Unless you are working with another student as part of a programming pair, it is not acceptable to permit that student to see any part of your program, and it is not acceptable to permit yourself to see any part of that other student’s program. In particular, you may not test or debug another student’s code, nor may you have another student test or debug your code. (If you can’t get code to work, consult a TA or the instructor.) Using another’s code in any form or writing code for use by another will be considered a violation of academic integrity.• Never, ever share your Linux account password (or private key) with another individual (whether student, faculty, or staff). Sharing your password with another student will be considered a violation of academic integrity. If you wish to transfer code between accounts, sending a git bundle via scp or email is one good approach. You are encouraged to submit general programming questions to online forums such as Stackoverflow. Questions about particular homework problems must never be posted onlinesend mail to the course staff.Finally, be aware that pair programming is a privilege, not a right. If you foul up and don’t fix it, I may revoke your pair-programming privileges. Fouling up consists of any of the following unacceptable behavior:• Repeatedly failing to keep appointments with your partner • Lying to your partner about what you have done• Violating academic intergrity• Other similarly egregious offensesIf I find it necessary to revoke your pair-programming privileges and you believe I have done so unfairly, you may appeal to the department chair.4
Tentative Course Outline:The weekly coverage might change as it depends on the progress of the class. However, you must keep up with the reading assignments. The reading assignment listed for a given class period should be completed by that class period (hence, no reading due for the first lecture).   Week Content  Sep 8 • Administrivia; syllabus; invariants, costs • Assignment 0 out  Sep 13 • Stable Matching• Reading assignment: K&T Chapter 1 • Assignment 1 out  Sep 15 • Sorting 1• Big O notation, Analysis  Sep 20 • Sorting 2• Reading: K&T Ch 2  Sep 22 • Graphs 1• Reading assignment: K&T Chapter 3  Sep 27 • Graphs 2• Assignment 2 out  Sep 29 • Graphs 3  Oct 4 • Divide & Conquer 1: Median-finding, Convex Hull • Reading assignment: K&T Chapter 5  Oct 6 • Divide & Conquer 2: Recurrence relations, Master Theorem • Assignment 3 out  Oct 11 • Divide & Conquer 3; Discrete Fourier Transform, FFT, Polynomials  Oct 13 • Divide & Conquer 4  Oct 18 • Greedy Algorithms 1: Exact Change • Assignment 4 out• Reading assignment: K&T Chapter 4  Oct 20 • Greedy Algorithms 2: Shortest Path, MST  Oct 25 • Greedy Algorithms 3  Oct 27 • Dynamic Programming 1: Fibonacci • Reading assignment: K&T Chapter 6                5
   Week Content  Nov 1 • Dynamic Programming 2: Sequence Alignment, All-Pairs Shortest Path • Assignment 5 out• Note: you should have come to Prof. Daniels’ office hours before now  Nov 3 • Dynamic Programming 3  Nov 8 • Network Flow 1• Reading assignment: K&T Chapter 7  Nov 10 • Network Flow 2  Nov 15 • Network Flow 3 • Assignment 6 out  Nov 17 • Halting Problem, Undecidability• Reading assignment: Scooping the Loop Snooper  Nov 22 • Intractability, Polynomial-Time Hierarchy • Reading assignment: K&T Chapter 8  Nov 24 • No class - Thanksgiving  Nov 29 • Convex Hull Revisited, Reductions • Assignment 7 out  Dec 1 • Protein Folding (HP Lattice)  Dec 6 • Randomized Algorithms 1  Dec 8 • Randomized Algorithms 2 • Last day of class             6